/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCarrinhoArgs } from "./CreateCarrinhoArgs";
import { UpdateCarrinhoArgs } from "./UpdateCarrinhoArgs";
import { DeleteCarrinhoArgs } from "./DeleteCarrinhoArgs";
import { CarrinhoCountArgs } from "./CarrinhoCountArgs";
import { CarrinhoFindManyArgs } from "./CarrinhoFindManyArgs";
import { CarrinhoFindUniqueArgs } from "./CarrinhoFindUniqueArgs";
import { Carrinho } from "./Carrinho";
import { CarrinhoService } from "../carrinho.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Carrinho)
export class CarrinhoResolverBase {
  constructor(
    protected readonly service: CarrinhoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Carrinho",
    action: "read",
    possession: "any",
  })
  async _carrinhosMeta(
    @graphql.Args() args: CarrinhoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Carrinho])
  @nestAccessControl.UseRoles({
    resource: "Carrinho",
    action: "read",
    possession: "any",
  })
  async carrinhos(
    @graphql.Args() args: CarrinhoFindManyArgs
  ): Promise<Carrinho[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Carrinho, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Carrinho",
    action: "read",
    possession: "own",
  })
  async carrinho(
    @graphql.Args() args: CarrinhoFindUniqueArgs
  ): Promise<Carrinho | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Carrinho)
  @nestAccessControl.UseRoles({
    resource: "Carrinho",
    action: "create",
    possession: "any",
  })
  async createCarrinho(
    @graphql.Args() args: CreateCarrinhoArgs
  ): Promise<Carrinho> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Carrinho)
  @nestAccessControl.UseRoles({
    resource: "Carrinho",
    action: "update",
    possession: "any",
  })
  async updateCarrinho(
    @graphql.Args() args: UpdateCarrinhoArgs
  ): Promise<Carrinho | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Carrinho)
  @nestAccessControl.UseRoles({
    resource: "Carrinho",
    action: "delete",
    possession: "any",
  })
  async deleteCarrinho(
    @graphql.Args() args: DeleteCarrinhoArgs
  ): Promise<Carrinho | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
